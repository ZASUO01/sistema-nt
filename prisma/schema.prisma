generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum UserLevel {
  ADMIN
  DEFAULT
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  firstName    String     @map("first_name")
  lastName     String     @map("last_name")
  passwordHash String     @map("password_hash")
  nick         String?
  phone        String?
  status       UserStatus
  level        UserLevel
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @map("updated_at")

  userAccesses        UserAccess[]
  loginTracks         LoginTrack[]
  passwordResetHashes PasswordResetHash[]

  @@map("users")
}

enum AppCode {
  FINANCE
  STOREROOM
}

enum AppLevel {
  READ
  ADDCHANGE
  DELETE
}

model UserAccess {
  id       String   @id @default(uuid())
  userId   String   @map("user_id")
  appCode  AppCode  @map("app_code")
  appLevel AppLevel @map("app_level")

  user User @relation(fields: [userId], references: [id])

  @@map("user_accesses")
}

enum LoginTrackState {
  SUCCESS
  FAILURE
}

model LoginTrack {
  id              String          @id @default(uuid())
  userId          String          @map("user_id")
  state           LoginTrackState
  device          String?
  addr            String?
  ocurredAt       DateTime        @default(now()) @map("ocurred_at")
  controlSequence Int             @map("control_sequence")

  user User @relation(fields: [userId], references: [id])

  @@map("login_tracks")
}

model PasswordResetHash {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  hash      String
  isValid   Boolean  @map("is_valid")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id])

  @@map("password_reset_hashes")
}
